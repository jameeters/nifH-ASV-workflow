## Copyright (C) 2023 Mo Morando
##
#_#  Snakefile file to mange the CMAP stage of the nifH ASV workflow ##
#_#  Configfile is used to supply parameters to Snakefile ##

##  Description:
##  CMAP Data Colocalization ##
##      Colocalizes input data with CMAP (Simons Collaboration on Ocean 
##      Processes and Ecology) data repositry and saves the colocalized dataset.
##      Calls script: query_CMAP.py
##          Takes CSV as input and colocalizes with specified targets in the 
##          CMAP database, and saves the colocalized dataset as a compressed 
##          CSV file.
## 
##  Parameters are passed via a config file. ##
#!############ MODIFICATION OF THIS FILE (config.json) IS REQUIRE #############
##  Configfile: config.json
#!#     MODIFY "api_key": "" TO BE YOUR API KEY as described at 
#!#      Your API key can be obtained here:
#!#      https: //simonscmap.com/apikeymanagement
##      
##  After the addition of your API key to the config file, workflow can be run 
##  as show below.
##
##
##  Usage:
##    snakemake -c1 --use-conda         # Default. Retrieve CMAP data if 
##                                        metadata.cmap.tsv changed.
##    snakemake -c1 clean               # Remove CMAP_metadata.csv.gz
##    snakemake -c1 superclean          # Remove CMAP_metadata.csv.gz and log 
##                                        directory.
##


# Load parameters from JSON config
configfile: "config.json"


# Import the datetime module
import datetime

# Function to generate a timestamp
def get_timestamp():
    return datetime.datetime.now().strftime("%Y%m%d")


rule CMAP_query:
    input:
        config["input_path"],
    output:
        config["output_path"],
    params:
        api_key=config["api_key"],
    log:
        expand(
            "logs/cmap_query_{timestamp}.log",
            timestamp=get_timestamp(),
        ),
    conda:
        "environments/CMAP_enviroments.yaml"
    shell:
        """
        python3 scripts/query_CMAP.py --input {input} --output {output} --cmap_api_key {params.api_key} > {log} 2>&1
        """


rule clean:
    shell:
        """
        echo "Cleaning output files only"
        snakemake -c 1 --use-conda --delete-all-output
        """


rule superclean:
    shell:
        """
        echo "Cleaning all files"
        snakemake -c 1 --use-conda --delete-all-output
        rm -rf logs/
        """
